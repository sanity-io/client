name: CI

on:
  merge_group:
  pull_request:
  push:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

permissions:
  contents: read # for checkout

jobs:
  build:
    name: Build, lint and test coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          cache: npm
          node-version: lts/*
      - run: npm ci
      - run: npx ls-engines
      - run: npm run prepublishOnly
      - name: Register Problem Matcher for ESLint that handles --report-unused-disable-directives
        run: echo "::add-matcher::.github/eslint-compact.json"
      - run: npm run lint -- --report-unused-disable-directives -f compact
      - run: npm run coverage -- --reporter=default --reporter=blob --outputFile.blob=.vitest-reports/blob-node.json
      - run: npm run benchmark
      - uses: actions/upload-artifact@v4
        name: Cache build output
        with:
          retention-days: 1
          name: build-output-${{ github.run_id }}
          path: |
            dist/
            umd/
      - name: Upload blob report to GitHub Actions Artifacts
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: blob-report-${{ github.run_id }}-node
          path: ".vitest-reports/*"
          include-hidden-files: true
          retention-days: 1

  test:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # Run the testing suite on each major OS with the latest LTS release of Node.js
        os: [macos-latest, ubuntu-latest, windows-latest]
        node: [lts/*]
        # It makes sense to also test the oldest, and latest, versions of Node.js, on ubuntu-only since it's the fastest CI runner
        include:
          - os: ubuntu-latest
            # Also test the previous LTS release
            node: lts/-1
          # @TODO re-enable after the nightly builds work with vitest once again
          # - os: ubuntu-latest
          #   # Test the actively developed version that will become the latest LTS release next October
          #   node: current
        # The `build` job already runs the testing suite in ubuntu and lts/*
        exclude:
          - os: ubuntu-latest
            node: lts/*
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          cache: npm
          node-version: ${{ matrix.node }}
      - run: npm install
      - run: npx ls-engines
      - run: npm test

  prod-deps:
    name: Cache production dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - id: prod-deps
        uses: actions/cache@v4
        with:
          path: ./node_modules
          key: prod-deps-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
      - if: steps.prod-deps.outputs.cache-hit != 'true'
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - if: steps.prod-deps.outputs.cache-hit != 'true'
        run: npm install --omit=dev --ignore-scripts

  edge-runtime:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          cache: npm
          node-version: lts/*
      - run: npm install
      - uses: actions/download-artifact@v4
        name: Restore build output
        with:
          name: build-output-${{ github.run_id }}
      - run: npm run test:edge-runtime -- --retry=30

  browser-runtime:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          cache: npm
          node-version: lts/*
      - run: npm install
      - uses: actions/download-artifact@v4
        name: Restore build output
        with:
          name: build-output-${{ github.run_id }}
      - run: npm run test:browser -- --coverage --reporter=default --reporter=blob --outputFile.blob=.vitest-reports/blob-browser.json
      - name: Upload blob report to GitHub Actions Artifacts
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: blob-report-${{ github.run_id }}-browser
          path: ".vitest-reports/*"
          include-hidden-files: true
          retention-days: 1

  deno-runtime:
    runs-on: ubuntu-latest
    needs: [build, prod-deps]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        name: Install only production dependencies
        with:
          path: ./node_modules
          key: prod-deps-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
      - uses: actions/download-artifact@v4
        name: Restore build output
        with:
          name: build-output-${{ github.run_id }}
      - uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x.x
      - run: npm run test:deno

  bun-runtime:
    runs-on: ubuntu-latest
    needs: [build, prod-deps]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        name: Install only production dependencies
        with:
          path: ./node_modules
          key: prod-deps-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
      - uses: actions/download-artifact@v4
        name: Restore build output
        with:
          name: build-output-${{ github.run_id }}
      - uses: antongolub/action-setup-bun@f0b9f339a7ce9ba1174a58484e4dc9bbd6f7b133 # v1
      - run: npm run test:bun

  node-runtimes:
    runs-on: ubuntu-latest
    needs: [build, prod-deps]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        name: Install only production dependencies
        with:
          path: ./node_modules
          key: prod-deps-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - uses: actions/download-artifact@v4
        name: Restore build output
        with:
          name: build-output-${{ github.run_id }}
      - run: npm run test:node-runtimes

  next-runtime:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          cache: npm
          node-version: lts/*
      - run: npm install
      - run: npm run test:next

  report-coverage:
    permissions:
      # Required to checkout the code
      contents: read
      # Required to put a comment into the pull-request
      pull-requests: write
    runs-on: ubuntu-latest
    needs: [build, browser-runtime]
    if: ${{ !cancelled() }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          cache: npm
          node-version: lts/*
      - run: npm install
      - name: "Download coverage artifacts"
        uses: actions/download-artifact@v4
        with:
          path: .vitest-reports
          pattern: blob-report-${{ github.run_id }}-*
          merge-multiple: true
      - name: Merge report
        run: npx vitest run --merge-reports --coverage
      - name: Report coverage
        uses: davelosert/vitest-coverage-report-action@v2
