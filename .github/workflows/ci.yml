name: CI & Release

# Workflow name based on selected inputs. Fallback to default Github naming when expression evaluates to empty string
run-name: >-
  ${{
    inputs.release && 'Publish to NPM' ||
    ''
  }}

on:
  pull_request:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      release:
        description: 'Publish new release'
        required: true
        default: false
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [lts/-3, lts/-2, lts/-1, lts/*, current]
    name: node ${{ matrix.node-version }}
    steps:
      - uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b # v3
      - uses: actions/setup-node@8c91899e586c5b171469028077307d293428b516 # tag=v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - run: npm install
      - run: npm test

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b # v3
      - uses: actions/setup-node@8c91899e586c5b171469028077307d293428b516 # tag=v3
        with:
          node-version: lts/*
          cache: 'npm'
      - run: npm ci
      - run: npm run prepublishOnly
      - uses: actions/upload-artifact@83fd05a356d7e2593de66fc9913b3002723633cb # tag=v3
        with:
          name: build-output
          path: |
            dist/
            lib/
            umd/

  prod-deps:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b # v3
      - id: prod-deps
        uses: actions/cache@4723a57e26efda3a62cbde1812113b730952852d # v3
        with:
          path: ./node_modules
          key: prod-deps-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
      - if: steps.prod-deps.outputs.cache-hit != 'true'
        uses: actions/setup-node@8c91899e586c5b171469028077307d293428b516 # tag=v3
        with:
          node-version: lts/*
      - if: steps.prod-deps.outputs.cache-hit != 'true'
        run: npm install --omit=dev --ignore-scripts

  # Disabled until the jest runtime works with ESM
  # edge-runtime:
  #   runs-on: ubuntu-latest
  #   needs: [build, prod-deps]
  #   steps:
  #     - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # tag=v3
  #     - uses: actions/setup-node@8c91899e586c5b171469028077307d293428b516 # tag=v3
  #       with:
  #         node-version: lts/*
  #         cache: 'npm'
  #         cache-dependency-path: runtimes/edge/package-lock.json
  #     - uses: actions/cache@1c73980b09e7aea7201f325a7aa3ad00beddcdda # tag=v3
  #       with:
  #         path: ./node_modules
  #         key: prod-deps-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
  #     - uses: actions/download-artifact@9782bd6a9848b53b110e712e20e42d89988822b7 # tag=v3
  #       with:
  #         name: build-output
  #     - run: npm ci
  #       working-directory: runtimes/edge
  #     - run: npm test
  #       working-directory: runtimes/edge

  deno-runtime:
    runs-on: ubuntu-latest
    needs: [build, prod-deps]
    steps:
      - uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b # v3
      - uses: actions/cache@4723a57e26efda3a62cbde1812113b730952852d # v3
        with:
          path: ./node_modules
          key: prod-deps-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
      - uses: actions/download-artifact@9782bd6a9848b53b110e712e20e42d89988822b7 # v3
        with:
          name: build-output
      - uses: denoland/setup-deno@v1
      - name: deno test
        run: |
          deno fmt --check
          deno lint
          deno task test
        working-directory: runtimes/deno

  bun-runtime:
    runs-on: ubuntu-latest
    needs: [build, prod-deps]
    steps:
      - uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b # v3
      - uses: actions/cache@4723a57e26efda3a62cbde1812113b730952852d # v3
        with:
          path: ./node_modules
          key: prod-deps-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
      - uses: antongolub/action-setup-bun@bc198f5cb868ce282f0a72bdd7da3a06a5387f83 # tag=v1
      - run: bun wiptest
        working-directory: runtimes/bun

  release:
    needs: [build, test, deno-runtime, bun-runtime]
    # only run if opt-in during workflow_dispatch
    if: github.event.inputs.release == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b # v3
        with:
          # Need to fetch entire commit history to
          # analyze every commit since last release
          fetch-depth: 0
      - uses: actions/setup-node@8c91899e586c5b171469028077307d293428b516 # tag=v3
        with:
          node-version: lts/*
          cache: npm
      - run: npm ci
        # Branches that will release new versions are defined in .releaserc.json
        # @TODO remove dry-run after everything is good to go
      - run: npx semantic-release
        # Don't allow interrupting the release step if the job is cancelled, as it can lead to an inconsistent state
        # e.g. git tags were pushed but it exited before `npm publish`
        if: always()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}
        # Re-run semantic release with rich logs if it failed to publish for easier debugging
      - run: npx semantic-release --dry-run --debug
        if: failure()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}
